1.题目描述
假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。

搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。

你可以假设数组中不存在重复的元素。

你的算法时间复杂度必须是 O(log n) 级别。

示例 1:

输入: nums = [4,5,6,7,0,1,2], target = 0
输出: 4
示例 2:

输入: nums = [4,5,6,7,0,1,2], target = 3
输出: -1
2.思路：看这很明显是用二分法的，因为复杂度是logn
        但是这不是排好序的数组，所以需要对每个情况进行讨论
  
3.代码
public int search(int[] nums, int target) {
        int start = 0;
        int end = nums.length-1;
        int mid = start + (end-start)/2;
        while (start <= end)
        {
            if(nums[mid] == target)
                return mid;
            //如果中间值位于左边的升序序列里面
            if (nums[start]<=nums[mid])
            {
                //必须判定左边界和右边界
                //如果target在左边
                if (nums[start] <= target && nums[mid]>=target)
                end = mid-1;
                //如果target 在右边
                else start = mid+1;
            }
            //如果中间值位于右边的升序序列里面
            else
            {
                //如果target位于右边序列里面
                if ( nums[mid] <= target && nums[end] >= target)
                {
                    start = mid+1;
                }
                //如果target位于左边序列
                else end = mid-1;
            }
            mid = start + (end-start)/2;
        }
        return -1;
    }
4.易错点：在代码之中，是否取等号，应该先取完等号再说
