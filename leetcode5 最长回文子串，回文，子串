知识点：动态规划，子串，回文字符
1.题目描述
给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

示例 1：

输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。
示例 2：

输入: "cbbd"
输出: "bb"

2.思考
看到回文字符串：我们可以想到如何判定回文字符串，定义一个判定是否回文的子方法：首尾遍历；翻转字符串与原字符串的最长公共子串
但是很明显这是一道关于动态规划的题：动态规划，每一个结果都可以追溯到已经得出的上一个结果，所以我们可以用一种数据结构将以前的结果保存，这里用二维数组
比如青蛙跳台阶就是可以用一维数组保存结果

3.java代码
    public String longestPalindrome(String s) {
        if (s.length() == 0 || s == null) return "";
        int length = s.length();
        String max="";
        boolean[][] booleans = new boolean[length+1][length + 1];
        //在这里，需要一列一列的来，思考，并且在矩阵中需要从下往上
        for (int j=0; j < length+1; j++){
            for (int i = j; i>=0; i--) {
                if (i == j || i + 1 == j)
                {
                    booleans[i][j]=true;
                }
                //什么样的判定条件判定数组不越界，因为j-1和i-1有小于零的情况
                else if (s.charAt(i) == s.charAt(j - 1) && booleans[i+1][j-1]) {
                    booleans[i][j] = true;
                }
                if (i!=j && booleans[i][j] && j-i+1>max.length())
                    max=s.substring(i,j);
            }
        }
       return max;
    }
