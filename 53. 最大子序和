知识点：序列和，枚举法，谈心，分治法，动态规划
这是一道可以重点掌握的题型，这是典型的一题多解问题，下面一个个的讨论
1.题目概述
给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。

示例:

输入: [-2,1,-3,4,-1,2,1,-5,4],
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。

2.解法

解法一：暴力法
一般而言看到一个问题第一个想法应该是暴力，遍历之类的，那么这道题用遍历如何做呢
求子序列和，那么我们可以枚举所有的子序列，那么用两个for循环，分别代表首尾，即可枚举出所有子序列
代码如下：
public int maxSubArray(int[] nums) {
        int max=Integer.MIN_VALUE;
        int sum=0;
        for(int i=0 ; i < nums.length ; i++){
            sum=0;
            for( int j=i ; j< nums.length ; j++ )
            {
                sum=sum+nums[j];
                max=Math.max(sum,max);
            }
            }
        return max;
        }
这种方法的时间复杂度很高o(x^2),空间复杂度o(1)

解法二：暴力枚举加前缀和
如果用一个序列s[n]来表示，前n项和。
则s[j]-s[i]可以表示从第i到第j项的和。
用a来表示s[i]代表前i项和的最小值
用b表示s[n]-s[i]中的最大值
则b就可以代表和最大序列
其实从这里也可以看出，和最大序列的首项和末项的序数，但题目没有要求，所以可以不用保存
 public int maxSubArray(int[] nums) {
        if (nums.length==0) return 0;
        int sum=0;
        int maxsum=nums[0];
        //这里需要注意，我们可以将第0项之前看作是0
        int minsum=0;
        for( int x : nums )
        {
            sum+=x;
            //这里需要注意，需要更新maxsum，而sum-minsum则是一直在变化的
            maxsum=Math.max(maxsum,sum-minsum);
            //这里需要注意，要在sum中不断地确定最小的
            minsum=Math.min(minsum,sum);
        }
        return maxsum;
        }
