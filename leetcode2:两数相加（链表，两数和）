知识点：链表的考察
1.题目描述
给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

2.思考，直接创建一个链表来保存两个链表的和，这两个链表的头到尾应该为从低位数到高位数
刚好，低位数相加后的进位可以给next链表
该链表为
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 
 3.java代码
     public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1==null && l2==null){return null;}
        int addone=0;
        int sum;
        //这里值得注意，要创建另一个链表来保存和链表的头部，以便输出
        ListNode listNode=new ListNode(0);
        ListNode headNode=listNode;
        while (l1!=null || l2!=null || addone!=0 )
        {
            int add1 = l1 != null ? l1.val:0;
            int add2 = l2 != null ? l2.val:0;
            sum=add1+add2+addone;
            //这里的判定出现过错误，应该对当前进行检查，如果当前是非空的话，就对下一个赋值。
            //如果写成l1.next != null 则会出现一直循环的情况下 
            if(l1 != null) l1=l1.next;
            if(l2 != null) l2=l2.next;
            addone=sum/10;
            listNode.next=new ListNode(sum%10);
            listNode = listNode.next;
        }
        return headNode.next;
    }
4.值得注意的是该题判定的时候，要对链表判定是否为空
